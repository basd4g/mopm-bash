#!/bin/bash -e

repo="github.com/basd4g/mopm-bash"
repo_dir="$HOME/.mopm-bash/repos/$repo"
definitions_dir="$repo_dir/definitions/`arch`/`uname`"

sub_command="$1"
package_name="$2"
definition_file="$definitions_dir/$package_name"

#===========================================================
#==================== library functions ====================
#===========================================================


function be_empty() {
  echo -n > "$1"
}

# stack
stack_path="/tmp/mopm-bash-stack"
be_empty "$stack_path"
function stack {
  case "$1" in
    "push" )
        if [ -n "$2" ] ; then # $2 is not empty
          echo -e "$2" >> "$stack_path"
        fi
      ;;
    "pop" )
        tail -1 "$stack_path"
        sed -i -e '$d' "$stack_path"
      ;;
    "is_empty" )
        if [ -s "$stack_path" ] ; then
          echo false
        else
          echo true
        fi
      ;;
    "length" )
        cat "$stack_path" | wc -l
      ;;
  esac
}

function error() {
  echo -e "$*" 1>&2
  exit 1
}

function package_verify() {
  pkg=$1
  def_file="$definitions_dir/$pkg"
  if ! [ -e "$def_file" ]; then
    error "The package '$pkg' is not found"
  fi
  verify_command=$(grep -E "^# mopm-verification: " $def_file | sed 's/^# mopm-verification: //')
  if $verify_command > /dev/null 2>&1; then
    echo "true"
  else
    echo "false"
  fi
}

function package_dependencies() {
  pkg=$1
  def_file="$definitions_dir/$pkg"
  if ! [ -e "$def_file" ]; then
    error "The package '$pkg' is not found"
  fi
  grep -E "^# mopm-dependencies: " $def_file | sed 's/^# mopm-dependencies: //' | sed 's/, /\n/g'
}

function not_include() {
  checking_lines="$1"
  checked_lines_path="$2"
  echo -e "$checking_lines" | while read checking_line; do
    if ! grep -q -x "$checking_line" "$checked_lines_path"; then
      echo "$checking_line"
    fi
  done
}

#===========================================================
#================== sub-command functions ==================
#===========================================================

function lint() {
  error_message=""

  if ! grep -q -E "^# mopm-url: https?://" $definition_file; then
    error_message+="The line 'mopm-url' is not found or invalid..\n"
  fi
  if ! grep -q -E "^# mopm-description: " $definition_file; then
    error_message+="The line 'mopm-description' is not found\n"
  fi
  if ! grep -q -E "^# mopm-dependencies: (([a-z0-9-]+, )*[a-z0-9-]+)?$" $definition_file; then
    error_message+="The line 'mopm-dependencies' is not found or invalid..\n"
  fi
  if ! grep -q -E "^# mopm-verification: " $definition_file; then
    error_message+="The line 'mopm-verification' is not found\n"
  fi

  if [ -n "$error_message" ]; then
    error $error_message
  fi
}

function search() {
  grep -E "^# mopm-url: https?://" $definition_file
  grep -E "^# mopm-description: " $definition_file
  grep -E "^# mopm-dependencies: (([a-z0-9-]+, )*[a-z0-9-]+)?$" $definition_file
  grep -E "^# mopm-verification: " $definition_file
}

function verify() {
  package_verify "$package_name"
}

function update() {
  if [ -e "$repo_dir" ]; then
    cd "$repo_dir"
    git pull -f origin master
  else
    git clone "https://$repo.git" "$repo_dir"
  fi
  echo "Updated"
}

function dependencies() {
  package_dependencies "$package_name"
}

function all-dependencies() {
  all_deps_path="/tmp/mopm-bash-all-dependencies"
  be_empty "$all_deps_path"

  stack push "$package_name"
  while [ "`stack is_empty`" = "false" ]; do
    pkg=`stack pop`
    deps=`package_dependencies "$pkg"`
    if echo -e "$deps" | grep -q -x "$package_name"; then
      # 関数の入り口で指定された package_name の loop は検知できるが、それ以外のループは検知できない
      error "Dependencies is looped"
    fi
    deps_not_installing="`not_include "$deps" "$all_deps_path"`"
    if [ "$deps_not_installing" = "" ]; then
      echo "$pkg" >> "$all_deps_path"
    else
      stack push "$pkg"
      stack push "$deps_not_installing"
    fi
    if [ "`stack length`" -gt "10000" ] ; then
      error "stack length >= 10000. Dependencies may be looped"
    fi
  done

  # 上から順にインストール可能な依存関係になっている
  cat "$all_deps_path"
}

function install() {
  if [ "$(verify)" = "true" ]; then
    echo "Already installed!"
    return
  fi

  all-dependencies | while read pkg; do
    if [ "$(package_verify "$pkg")" = "false" ]; then
      bash "$definitions_dir/$pkg"
    fi
  done
}


#===========================================================
#======================= entry point =======================
#===========================================================

case "$sub_command" in
  "update" )
      update
    ;;
  'lint' | 'search' | 'dependencies' | 'all-dependencies' | 'verify' | 'install' )
      if ! [ -e "$definition_file" ]; then
        error "The package '$package_name' is not found"
      fi
      "$sub_command"
    ;;
  * )
      cat - << 'EOF'
mopm-bash is a package manager on bash.
usage: mopm-bash <command> [<args>]

These are common mopm-bash commands:
  update             Download latest package definitions.
  lint               Check syntax of the package definition.
  search             Search and show packages.
  dependencies       Show package dependencies.
  all-dependencies   Show package all dependencies.
  verify             Check the package is installed or not.
  install            Install the package.
  help               Show this help.
EOF
    ;;
esac
