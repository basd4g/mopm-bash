#!/bin/bash -e

function be_empty() {
  echo -n > "$1"
}

# stack
stack_path="/tmp/stack"
be_empty "$stack_path"
function stack {
  if [ "$1" = "push" ]; then
    if [ -n "$2" ] ; then # $2 is not empty
      echo -e "$2" >> "$stack_path"
    fi
  elif [ "$1" = "pop" ]; then
    tail -1 "$stack_path"
    sed -i -e '$d' "$stack_path"
  elif [ "$1" = "show" ]; then
    tail -1 "$stack_path"
  elif [ "$1" = "is_empty" ]; then
    if [ -s "$stack_path" ] ; then
      echo false
    else
      echo true
    fi
  elif [ "$1" = "length" ]; then
    cat "$stack_path" | wc -l
  fi
}

function error() {
  echo -e "$*" 1>&2
  exit 1
}

function package_dependencies() {
  pkg_name=$1
  def_file="definitions/`arch`/`uname`/$pkg_name"
  if ! [ -e "$def_file" ]; then
    error "The package '$pkg_name' is not found"
  fi
  grep -E "^# mopm-dependencies: " $def_file | sed 's/^# mopm-dependencies: //' | sed 's/, /\n/g'
}

function not_include() {
  checking_lines="$1"
  checked_lines_path="$2"
  echo -e "$checking_lines" | while read checking_line; do
    if ! grep -q -x "$checking_line" "$checked_lines_path"; then
      echo "$checking_line"
    fi
  done
}

function lint() {
  error_message=""

  if ! grep -q -E "^# mopm-url: https?://" $definition_file; then
    error_message+="The line 'mopm-url' is not found or invalid..\n"
  fi
  if ! grep -q -E "^# mopm-description: " $definition_file; then
    error_message+="The line 'mopm-description' is not found\n"
  fi
  if ! grep -q -E "^# mopm-dependencies: (([a-z0-9-]+, )*[a-z0-9-]+)?$" $definition_file; then
    error_message+="The line 'mopm-dependencies' is not found or invalid..\n"
  fi
  if ! grep -q -E "^# mopm-verification: " $definition_file; then
    error_message+="The line 'mopm-verification' is not found\n"
  fi

  if [ -n "$error_message" ]; then
    error $error_message
  fi
}

function search() {
  grep -E "^# mopm-url: https?://" $definition_file
  grep -E "^# mopm-description: " $definition_file
  grep -E "^# mopm-dependencies: (([a-z0-9-]+, )*[a-z0-9-]+)?$" $definition_file
  grep -E "^# mopm-verification: " $definition_file
}

function verify() {
  verify_command=$(grep -E "^# mopm-verification: " $definition_file | sed 's/^# mopm-verification: //')
  if $verify_command > /dev/null 2>&1; then
    echo "true"
  else
    echo "false"
  fi
}

function update() {
  github_user="basd4g"
  github_repo="mopm-bash"
  mopm_repos_dir="${HOME}/.mopm-bash/repos"
  mopm_repos_user_dir="${mopm_repos_dir}/github.com/${github_user}"
  mopm_repos_user_repo_dir="${mopm_repos_user_dir}/${github_repo}"

  if [ -e "${mopm_repos_user_repo_dir}" ]; then
    cd "${mopm_repos_user_repo_dir}"
    git pull -f origin master
  else
    mkdir -p "${mopm_repos_user_dir}"
    cd "${mopm_repos_user_dir}"
    git clone "https://github.com/${github_user}/${github_repo}.git"
  fi
  echo "Updated"
}

function dependencies() {
  package_dependencies "$package_name"
}

function all-dependencies() {
  all_deps_path="/tmp/all_deps"
  be_empty "$all_deps_path"

  stack push "$package_name"
  while [ "`stack is_empty`" = "false" ]; do
    pkg=`stack pop`
    deps=`package_dependencies "$pkg"`
    if echo -e "$deps" | grep -q -x "$package_name"; then
      # 関数の入り口で指定された package_name の loop は検知できるが、それ以外のループは検知できない
      error "Dependencies is looped"
    fi
    deps_not_installing="`not_include "$deps" "$all_deps_path"`"
    if [ "$deps_not_installing" = "" ]; then
      echo "$pkg" >> "$all_deps_path"
    else
      stack push "$pkg"
      stack push "$deps_not_installing"
    fi
    if [ "`stack length`" -gt "10000" ] ; then
      error "stack length >= 10000. Dependencies may be looped"
    fi
  done

  # 上から順にインストール可能な依存関係になっている
  cat "$all_deps_path"
}

function install() {
  if [ "$(verify "$package_name")" = "true" ]; then
    echo "Already installed!"
    return
  fi

  defdir="definitions/`arch`/`uname`"
  all-dependencies "$package_name" | while read pkg; do
    deffile="$defdir/$pkg"
    if ! [ -e "$deffile" ]; then
      error "The package '$pkg' is not found"
    fi
    if [ "$(verify "$pkg")" = "false" ]; then
      bash "$deffile"
    fi
  done
}



sub_command="$1"
package_name="$2"
definition_file="definitions/`arch`/`uname`/$package_name"
case "$sub_command" in
  "update" )
    update
    ;;
  'lint' | 'search' | 'dependencies' | 'all-dependencies' | 'verify' | 'install' )
    if ! [ -e "$definition_file" ]; then
      error "The package '$package_name' is not found"
    fi
    "$sub_command" "$package_name"
    ;;
esac
